// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "userId")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String?        @unique
  password        String?
  emailVerified   DateTime?
  image           String?
  role            UserRole       @default(USER)
  //credits       Int       @default(10)
  createdAt       DateTime?      @default(now())
  updatedAt       DateTime?      @updatedAt
  accounts        Account[]
  sessions        Session[]
  createdTickets  Ticket[]       @relation("CreatedByUser")
  assignedTickets Ticket[]       @relation("AssignedToUser")
  notifications   Notification[]
  resolver        TimeResolver[]
  creatorComment  Comment[]      @relation("CreatorComment")
  fileCommentUrl  FileCommentUrl[]
  stateAccount Boolean @default(true)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Ticket {
  id          String           @id @default(cuid())
  numberTicket String?
  title       String?
  description String?
  status      String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  createdBy   User             @relation("CreatedByUser", fields: [createdById], references: [id])
  createdById String
  assignedTo  String
  assigened   User             @relation("AssignedToUser", fields: [assignedTo], references: [id])
  comments    Comment[]
  category    Category         @relation(fields: [categoryId], references: [id])
  categoryId  String
  project     Project          @relation(fields: [projectId], references: [id])
  projectId   String
  resolver    TimeResolver[]
  priority    Priority         @relation(fields: [priorityId], references: [id])
  priorityId  String
  tracking    TrackingTicket[]

  @@index([categoryId], name: "categoryId")
  @@index([assignedTo], name: "assignedTo")
  @@index([projectId], name: "projectId")
  @@index([priorityId], name: "priorityId")
  @@index([createdById], name: "createdById")
}

model Comment {
  id          String   @id @default(cuid())
  content     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatorBy   User     @relation("CreatorComment", fields: [creatorById], references: [id], onDelete: Cascade)
  creatorById String
  ticketId    String
  ticket      Ticket   @relation(fields: [ticketId], references: [id])
  deleted     Boolean  @default(false)
  fileUrl     FileCommentUrl[]
  read       Boolean  @default(false)

  @@index([ticketId], name: "ticketId")
  @@index([creatorById], name: "createdById")


  //@@unique([creatorById, ticketId])
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId")
}

model Category {
  id      String   @id @default(cuid())
  name    String
  tickets Ticket[]
}

model Project {
  id      String   @id @default(cuid())
  name    String
  tickets Ticket[]
}

model TimeResolver {
  id        String   @id @default(cuid())
  ticketId  String
  userId    String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([ticketId], name: "ticketId")
  @@index([userId], name: "userId")
}

model Priority {
  id      String   @id @default(cuid())
  name    String
  tickets Ticket[]
}

model TrackingTicket {
  id       String  @id @default(cuid())
  url      String?
  ticketId String
  ticket   Ticket  @relation(fields: [ticketId], references: [id])

  @@index([ticketId], name: "ticketId")
}


model FileCommentUrl {
  id        String  @id @default(cuid())
  url       String
  userId String
  user   User   @relation(fields: [userId], references: [id])
  commentId  String
  comment   Comment @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())

  @@index([userId], name: "userId")
  @@index([commentId], name: "commentId")
}





